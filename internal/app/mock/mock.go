// Code generated by MockGen. DO NOT EDIT.
// Source: person.go

// Package mock_app is a generated GoMock package.
package mock_app

import (
	context "context"
	reflect "reflect"

	app "github.com/EgorMamoshkin/person-api-crud/internal/app"
	gomock "github.com/golang/mock/gomock"
)

// MockPersonLogic is a mock of PersonLogic interface.
type MockPersonLogic struct {
	ctrl     *gomock.Controller
	recorder *MockPersonLogicMockRecorder
}

// MockPersonLogicMockRecorder is the mock recorder for MockPersonLogic.
type MockPersonLogicMockRecorder struct {
	mock *MockPersonLogic
}

// NewMockPersonLogic creates a new mock instance.
func NewMockPersonLogic(ctrl *gomock.Controller) *MockPersonLogic {
	mock := &MockPersonLogic{ctrl: ctrl}
	mock.recorder = &MockPersonLogicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersonLogic) EXPECT() *MockPersonLogicMockRecorder {
	return m.recorder
}

// DeletePerson mocks base method.
func (m *MockPersonLogic) DeletePerson(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePerson", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePerson indicates an expected call of DeletePerson.
func (mr *MockPersonLogicMockRecorder) DeletePerson(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePerson", reflect.TypeOf((*MockPersonLogic)(nil).DeletePerson), ctx, id)
}

// GetPersonByID mocks base method.
func (m *MockPersonLogic) GetPersonByID(ctx context.Context, id int) (*app.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonByID", ctx, id)
	ret0, _ := ret[0].(*app.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersonByID indicates an expected call of GetPersonByID.
func (mr *MockPersonLogicMockRecorder) GetPersonByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonByID", reflect.TypeOf((*MockPersonLogic)(nil).GetPersonByID), ctx, id)
}

// GetPersonList mocks base method.
func (m *MockPersonLogic) GetPersonList(ctx context.Context, offsetId, batchSize int) ([]app.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonList", ctx, offsetId, batchSize)
	ret0, _ := ret[0].([]app.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersonList indicates an expected call of GetPersonList.
func (mr *MockPersonLogicMockRecorder) GetPersonList(ctx, offsetId, batchSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonList", reflect.TypeOf((*MockPersonLogic)(nil).GetPersonList), ctx, offsetId, batchSize)
}

// StorePerson mocks base method.
func (m *MockPersonLogic) StorePerson(ctx context.Context, per *app.Person) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorePerson", ctx, per)
	ret0, _ := ret[0].(error)
	return ret0
}

// StorePerson indicates an expected call of StorePerson.
func (mr *MockPersonLogicMockRecorder) StorePerson(ctx, per interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorePerson", reflect.TypeOf((*MockPersonLogic)(nil).StorePerson), ctx, per)
}

// UpdatePerson mocks base method.
func (m *MockPersonLogic) UpdatePerson(ctx context.Context, per *app.Person) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePerson", ctx, per)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePerson indicates an expected call of UpdatePerson.
func (mr *MockPersonLogicMockRecorder) UpdatePerson(ctx, per interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePerson", reflect.TypeOf((*MockPersonLogic)(nil).UpdatePerson), ctx, per)
}

// MockPersonRepository is a mock of PersonRepository interface.
type MockPersonRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPersonRepositoryMockRecorder
}

// MockPersonRepositoryMockRecorder is the mock recorder for MockPersonRepository.
type MockPersonRepositoryMockRecorder struct {
	mock *MockPersonRepository
}

// NewMockPersonRepository creates a new mock instance.
func NewMockPersonRepository(ctrl *gomock.Controller) *MockPersonRepository {
	mock := &MockPersonRepository{ctrl: ctrl}
	mock.recorder = &MockPersonRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersonRepository) EXPECT() *MockPersonRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockPersonRepository) Delete(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPersonRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPersonRepository)(nil).Delete), ctx, id)
}

// GetByEmail mocks base method.
func (m *MockPersonRepository) GetByEmail(ctx context.Context, email string, id int) (*app.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", ctx, email, id)
	ret0, _ := ret[0].(*app.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockPersonRepositoryMockRecorder) GetByEmail(ctx, email, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockPersonRepository)(nil).GetByEmail), ctx, email, id)
}

// GetByID mocks base method.
func (m *MockPersonRepository) GetByID(ctx context.Context, id int) (*app.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*app.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockPersonRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPersonRepository)(nil).GetByID), ctx, id)
}

// GetPersonList mocks base method.
func (m *MockPersonRepository) GetPersonList(ctx context.Context, id, batchSize int) ([]app.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonList", ctx, id, batchSize)
	ret0, _ := ret[0].([]app.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersonList indicates an expected call of GetPersonList.
func (mr *MockPersonRepositoryMockRecorder) GetPersonList(ctx, id, batchSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonList", reflect.TypeOf((*MockPersonRepository)(nil).GetPersonList), ctx, id, batchSize)
}

// Store mocks base method.
func (m *MockPersonRepository) Store(ctx context.Context, person *app.Person) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, person)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockPersonRepositoryMockRecorder) Store(ctx, person interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockPersonRepository)(nil).Store), ctx, person)
}

// Update mocks base method.
func (m *MockPersonRepository) Update(ctx context.Context, person *app.Person) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, person)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPersonRepositoryMockRecorder) Update(ctx, person interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPersonRepository)(nil).Update), ctx, person)
}
